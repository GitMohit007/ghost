#!/usr/bin/env python
PACKAGE = "ghost"

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

gen.add("apply_clahe", bool_t, 0, "Apply CLAHE histogram equalization", False)
gen.add("clahe_clip_limit", double_t, 0, "Clipping limit for CLAHE histogram equalization", 0.5, 0.0, 5.0)

gen.add("apply_gauss", bool_t, 0, "Apply Gaussian filter", True)
gen.add("gauss_k_size",  int_t,    0, "Size of kernal for Gaussian blur",                     5,     3,   9)
gen.add("gauss_sigma_x", double_t, 0, "Gaussian kernel standar deviation in the X direction", 100.0, 1.0, 1000.0)
gen.add("gauss_sigma_y", double_t, 0, "Gaussian kernel standar deviation in the Y direction",  10.0, 1.0, 1000.0)

gen.add("apply_bilateral", bool_t, 0, "Apply bilateral filter", False)
gen.add("bilateral_k_size",      int_t,    0, "Size of kernal for Gaussian blur",               3,      3,   9)
gen.add("bilateral_sigma_color", double_t, 0, "Bilateral filter sigma in the color space",      1000.0, 1.0, 3000.0)
gen.add("bilateral_sigma_space", double_t, 0, "Bilateral filter sigma in the coordinate space", 1000.0, 1.0, 3000.0)

canny_enum = gen.enum([gen.const("Otsu",   int_t, 0, "0.5 and 1.0 times the Otsu threshold"),
                       gen.const("Median", int_t, 1, "Plus/minus 0.33 of median pixel value"),
                       gen.const("Mean",   int_t, 2, "Plus/minus 0.33 of mean pixel value")],
                      "Method for determining Canny edge detection thresholds")
gen.add("canny_threshold", int_t, 0, "A size parameter which is edited via an enum", 0, 0, 2, edit_method=canny_enum)

gen.add("apply_vert_edge", bool_t, 0, "Apply filter to remove vertical edges", False)

exit(gen.generate(PACKAGE, "ghost", "LaneDetector"))
