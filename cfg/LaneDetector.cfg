#!/usr/bin/env python
PACKAGE = "ghost"

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

gen.add("use_imu", bool_t, 0, "If the IMU should be used to adjust camera pitch and roll", False)

gen.add("apply_gauss", bool_t, 0, "Apply Gaussian filter", True)
gen.add("gauss_k_size",  int_t,    0, "Size of kernal for Gaussian blur",                     5,     3,   9)
gen.add("gauss_sigma_x", double_t, 0, "Gaussian kernel standar deviation in the X direction", 0.8, 0.0, 10.0)
gen.add("gauss_sigma_y", double_t, 0, "Gaussian kernel standar deviation in the Y direction",  0.4, 0.0, 10.0)

canny_enum = gen.enum([gen.const("Otsu",   int_t, 0, "0.5 and 1.0 times the Otsu threshold"),
                       gen.const("Median", int_t, 1, "Plus/minus 0.33 of median pixel value"),
                       gen.const("Mean",   int_t, 2, "Plus/minus 0.33 of mean pixel value"),
                       gen.const("Manual", int_t, 3, "Use the canny_lower and canny_upper parameters")],
                      "Method for determining Canny edge detection thresholds")
gen.add("canny_threshold", int_t, 0, "Method for determining Canny edge detection thresholds", 0, 0, 3, edit_method=canny_enum)
gen.add("canny_lower", int_t, 0, "Lower threshold for Canny edge detection (during manual mode)", 50, 0, 255)
gen.add("canny_upper", int_t, 0, "Upper threshold for Canny edge detection (during manual mode)", 200, 0, 255)

gen.add("scan_whole_row", bool_t, 0, "Detect all edges in a row, instead of only the first one", False)
gen.add("max_width", double_t, 0, "Maximum width to detect lane", 5.0, 0.0, 15.0)
gen.add("lane_centre_alpha", double_t, 0, "Coefficient for exponential moving average of lane centreline", 0.9, 0.0, 1.0)

exit(gen.generate(PACKAGE, "ghost", "LaneDetector"))
